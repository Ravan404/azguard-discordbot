const { SlashCommandBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder } = require('discord.js');

const colors = [
    { name: 'S…ôma Mavisi', id: 'sema_mavisi', color: '#87CEEB' },
    { name: 'A√ßƒ±q √á…ôhrayƒ±', id: 'aciq_cehrayi', color: '#FFB6C1' },
    { name: 'Nan…ô Ya≈üƒ±lƒ±', id: 'nane_yasili', color: '#98FF98' },
    { name: 'Lavanda', id: 'lavanda', color: '#E6E6FA' },
    { name: '≈ûaftalƒ±', id: 'saftali', color: '#FFDAB9' },
    { name: 'Qƒ±zƒ±lg√ºl', id: 'qizilgul', color: '#FF69B4' },
    { name: 'Limon Sarƒ±sƒ±', id: 'limon_sarisi', color: '#FFFF00' },
    { name: 'D…ôniz Ya≈üƒ±lƒ±', id: 'deniz_yasili', color: '#20B2AA' },
    { name: 'Bulud Aƒüƒ±', id: 'bulud_agi', color: '#F0F8FF' },
    { name: 'G√ºnbatƒ±mƒ± Narƒ±ncƒ±', id: 'gunbatimi_narinci', color: '#FFA07A' }
];

module.exports = {
    data: new SlashCommandBuilder()
        .setName('colormenu')
        .setDescription('R…ông se√ßm…ô menyusunu g√∂st…ôrir'),

    async execute(interaction) {
        try {
            const leftColors = colors.slice(0, 5);
            const rightColors = colors.slice(5, 10);

            const embed = new EmbedBuilder()
                .setTitle('üé® R…ông Se√ßimi')
                .setDescription('A≈üaƒüƒ±dakƒ± d√ºym…ôl…ôrd…ôn √∂z√ºn√ºz…ô r…ông se√ß…ô bil…ôrsiniz!')
                .addFields(
                    { 
                        name: 'Sol S√ºtun', 
                        value: leftColors.map((c, i) => `${i + 1}. ${c.name}`).join('\n'), 
                        inline: true 
                    },
                    { 
                        name: 'Saƒü S√ºtun', 
                        value: rightColors.map((c, i) => `${i + 6}. ${c.name}`).join('\n'), 
                        inline: true 
                    }
                )
                .setColor('#ff00ff')
                .setTimestamp();

            const leftRow = new ActionRowBuilder();
            leftColors.forEach((color, index) => {
                leftRow.addComponents(
                    new ButtonBuilder()
                        .setCustomId(color.id)
                        .setLabel(`${index + 1}`)
                        .setStyle(ButtonStyle.Primary)
                        .setEmoji('üé®')
                );
            });

            const rightRow = new ActionRowBuilder();
            rightColors.forEach((color, index) => {
                rightRow.addComponents(
                    new ButtonBuilder()
                        .setCustomId(color.id)
                        .setLabel(`${index + 6}`)
                        .setStyle(ButtonStyle.Primary)
                        .setEmoji('üé®')
                );
            });

            await interaction.reply({
                embeds: [embed],
                components: [leftRow, rightRow],
                ephemeral: false
            });

        } catch (error) {
            console.error('X…ôta:', error);
            await interaction.reply({
                content: '‚ùå R…ông menyusu yaradƒ±lark…ôn x…ôta ba≈ü verdi!',
                ephemeral: true
            });
        }
    },
};