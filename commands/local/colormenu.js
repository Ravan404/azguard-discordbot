const { SlashCommandBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder } = require('discord.js');
const fs = require('fs');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('colormenu')
        .setDescription('R…ông se√ßm…ô menyusunu g√∂st…ôrir')
        .setDefaultMemberPermissions('0'),

    async execute(interaction) {
        try {
            const colorRoles = JSON.parse(fs.readFileSync('./colorRoles.json', 'utf8'));
            const entries = Object.entries(colorRoles);
            
            // Sol ve saƒü s√ºtunlar i√ßin renkleri b√∂l
            const leftColors = entries.slice(0, 5);
            const rightColors = entries.slice(5, 10);

            // R…ông listesini iki s√ºtun olarak hazƒ±rla
            let leftList = '';
            leftColors.forEach(([key, value]) => {
                const colorName = key.replace(/_/g, ' ').split(' ')
                    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                    .join(' ');
                leftList += `${value.number}. ${colorName}\n`;
            });

            let rightList = '';
            rightColors.forEach(([key, value]) => {
                const colorName = key.replace(/_/g, ' ').split(' ')
                    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                    .join(' ');
                rightList += `${value.number}. ${colorName}\n`;
            });

            const embed = new EmbedBuilder()
                .setTitle('üé® R…ông Se√ßimi')
                .setDescription('A≈üaƒüƒ±daki d√ºym…ôl…ôrd…ôn √∂z√ºn√ºz…ô r…ông se√ß…ô bil…ôrsiniz!')
                .addFields(
                    { name: 'Sol S√ºtun', value: leftList, inline: true },
                    { name: 'Saƒü S√ºtun', value: rightList, inline: true }
                )
                .setColor('#ff00ff')
                .setTimestamp();

            // Sol s√ºtun butonlarƒ±
            const leftRow = new ActionRowBuilder();
            leftColors.forEach(([key, value]) => {
                leftRow.addComponents(
                    new ButtonBuilder()
                        .setCustomId(key)
                        .setLabel(`R…ông ${value.number}`)
                        .setStyle(ButtonStyle.Primary)
                        .setEmoji('üé®')
                );
            });

            // Saƒü s√ºtun butonlarƒ±
            const rightRow = new ActionRowBuilder();
            rightColors.forEach(([key, value]) => {
                rightRow.addComponents(
                    new ButtonBuilder()
                        .setCustomId(key)
                        .setLabel(`R…ông ${value.number}`)
                        .setStyle(ButtonStyle.Primary)
                        .setEmoji('üé®')
                );
            });

            await interaction.reply({
                embeds: [embed],
                components: [leftRow, rightRow],
                ephemeral: false
            });

        } catch (error) {
            console.error('X…ôta:', error);
            await interaction.reply({
                content: '‚ùå R…ông menyusu yaradƒ±lark…ôn x…ôta ba≈ü verdi!',
                ephemeral: true
            });
        }
    },
};